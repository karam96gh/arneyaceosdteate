generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  neighborhoods Neighborhood[]
  realEstates   RealEstate[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("cities")
}

model Neighborhood {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  cityId      Int
  city        City         @relation(fields: [cityId], references: [id], onDelete: Cascade)
  finalCities FinalCity[]
  realEstates RealEstate[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("neighborhoods")
}

model FinalCity {
  id             Int          @id @default(autoincrement())
  name           String?      @db.VarChar(100)
  neighborhoodId Int
  location       String       @default("32.5555,32.999") @db.VarChar(250)
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade)
  realEstates    RealEstate[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("finalcity")
}

model MainType {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50)
  icon        String       @default("icon.png") @db.VarChar(50)
  subTypes    SubType[]
  realEstates RealEstate[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("maintype")
}

model SubType {
  id          Int          @id @default(autoincrement())
  mainId      Int
  name        String       @db.VarChar(50)
  mainType    MainType     @relation(fields: [mainId], references: [id], onDelete: Cascade)
  finalTypes  FinalType[]
  realEstates RealEstate[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("subtype")
}

model FinalType {
  id          Int          @id @default(autoincrement())
  subId       Int
  name        String       @db.VarChar(255)
  subType     SubType      @relation(fields: [subId], references: [id], onDelete: Cascade)
  realEstates RealEstate[]
  properties  Property[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("finaltype")
}

// ✅ تعديل Building مع إضافة companyId
model Building {
  id          String         @id @default(uuid()) @db.Char(36)
  title       String         @db.VarChar(255)
  status      BuildingStatus
  location    String         @default("0.0,0.0") @db.VarChar(250)
  buildingAge String?        @db.VarChar(255)
  companyId   Int?            // ✅ إضافة حقل الشركة
  items       BuildingItem[]
  realEstates RealEstate[]
  company     User?           @relation("CompanyBuildings", fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("buildings")
}

// ✅ تعديل BuildingItem مع إضافة companyId
model BuildingItem {
  id          String           @id @default(uuid()) @db.Char(36)
  name        String           @db.VarChar(255)
  price       String           @db.VarChar(50)
  area        String?          @db.VarChar(50)
  type        BuildingItemType
  buildingId  String?          @map("building_id") @db.Char(36)
  companyId   Int?              // ✅ إضافة حقل الشركة
  building    Building?        @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  company     User?             @relation("CompanyBuildingItems", fields: [companyId], references: [id], onDelete: Cascade)
  realEstates RealEstate[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("building_items")
}

// ✅ تعديل RealEstate مع إضافة companyId
model RealEstate {
  id             Int       @id @default(autoincrement())
  cityId         Int
  neighborhoodId Int
  paymentMethod  String    @db.VarChar(100)
  mainCategoryId Int
  subCategoryId  Int
  coverImage     String    @db.VarChar(100)
  price          Int
  title          String    @default("") @db.VarChar(100)
  finalTypeId    Int
  buildingId     String?   @db.Char(36)
  buildingItemId String?   @db.Char(36)
  companyId      Int?       // ✅ إضافة حقل الشركة
  location       String?   @db.VarChar(50)
  viewTime       String?   @db.VarChar(255)
  description    String?   @db.VarChar(1000)
  finalCityId    Int?
  createdAt      DateTime? @db.DateTime
  others         String?   @db.LongText
  advertiserType      String?  @default("user") @db.VarChar(20)
  advertiserName      String?  @db.VarChar(255)
  advertiserPhone     String?  @db.VarChar(20)
  advertiserWhatsapp  String?  @db.VarChar(20)
  
  // Relations
  city           City            @relation(fields: [cityId], references: [id], onDelete: Cascade)
  neighborhood   Neighborhood    @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade)
  mainCategory   MainType        @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
  subCategory    SubType         @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  finalType      FinalType       @relation(fields: [finalTypeId], references: [id], onDelete: Cascade)
  finalCity      FinalCity?      @relation(fields: [finalCityId], references: [id], onDelete: Cascade)
  building       Building?       @relation(fields: [buildingId], references: [id], onDelete: SetNull)
  buildingItem   BuildingItem?   @relation(fields: [buildingItemId], references: [id], onDelete: SetNull)
  company        User?           @relation("CompanyRealEstates", fields: [companyId], references: [id], onDelete: Cascade)
  files          File[]
  propertyValues PropertyValue[]
  Reservation    Reservation[]

  @@map("realestate")
}

model File {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  realestateId Int
  realEstate   RealEstate @relation(fields: [realestateId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("files")
}

model Property {
  id             Int              @id @default(autoincrement())
  finalTypeId    Int
  propertyKey    String           @db.VarChar(100)
  propertyName   String           @db.VarChar(255)
  groupName      String           @db.VarChar(100)
  dataType       PropertyDataType
  allowedValues  String?          @db.LongText
  isFilter       Boolean          @default(false)
  displayOrder   Int              @default(0)
  isRequired     Boolean          @default(false)
  placeholder    String?          @db.VarChar(255)
  groupSelect    Boolean          @default(false)
  unit           String?          @db.VarChar(10)
  finalType      FinalType        @relation(fields: [finalTypeId], references: [id], onDelete: Cascade)
  propertyValues PropertyValue[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([finalTypeId, propertyKey], name: "unique_property_per_type")
  @@map("properties")
}

model PropertyValue {
  id           Int        @id @default(autoincrement())
  realEstateId Int
  propertyId   Int
  value        String?    @db.LongText
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id], onDelete: Cascade)
  property     Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([realEstateId, propertyId], name: "unique_property_value")
  @@map("property_values")
}

// ✅ تعديل User مع إضافة العلاقات الجديدة
model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique @db.VarChar(50)
  password       String    @db.VarChar(255)
  fullName       String    @db.VarChar(100)
  email          String    @unique @db.VarChar(100)
  phone          String?   @db.VarChar(20)
  role           UserRole  @default(USER)
  isActive       Boolean   @default(true)
  companyName    String?   @db.VarChar(255)
  companyLicense String?   @db.VarChar(255)
  vipExpiryDate  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  reservations        Reservation[]
  companyReservations Reservation[] @relation("CompanyReservations")
  companyRealEstates  RealEstate[]  @relation("CompanyRealEstates")     // ✅ إضافة علاقة العقارات
  companyBuildings    Building[]    @relation("CompanyBuildings")       // ✅ إضافة علاقة المباني
  companyBuildingItems BuildingItem[] @relation("CompanyBuildingItems") // ✅ إضافة علاقة عناصر المباني

  @@map("users")
}

model Reservation {
  id         Int               @id @default(autoincrement())
  propertyId Int
  userId     Int
  companyId  Int?
  status     ReservationStatus @default(PENDING)
  visitDate  DateTime
  visitTime  String            @db.VarChar(10)
  notes      String?           @db.Text
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  property RealEstate @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  User?      @relation("CompanyReservations", fields: [companyId], references: [id], onDelete: SetNull)

  @@map("reservations")
}

enum UserRole {
  USER     @map("user")
  USER_VIP @map("user_vip")
  ADMIN    @map("admin")
  COMPANY  @map("company")
}

enum ReservationStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")
}

enum BuildingStatus {
  COMPLETED          @map("مكتمل")
  UNDER_CONSTRUCTION @map("قيد_الإنشاء")
  PLANNED            @map("مخطط")
}

enum BuildingItemType {
  APARTMENT @map("apartment")
  SHOP      @map("shop")
  VILLA     @map("villa")
  OFFICE    @map("office")
}

enum PropertyDataType {
  NUMBER          @map("number")
  TEXT            @map("text")
  MULTIPLE_CHOICE @map("multiple_choice")
  SINGLE_CHOICE   @map("single_choice")
  DATE            @map("date")
  BOOLEAN         @map("boolean")
  FILE            @map("file")
}